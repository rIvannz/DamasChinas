//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DamasChinas_Client.UI.ChatServiceProxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestinationUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdDestinationUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SendDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestinationUsername {
            get {
                return this.DestinationUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.DestinationUsernameField, value) != true)) {
                    this.DestinationUsernameField = value;
                    this.RaisePropertyChanged("DestinationUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdDestinationUsername {
            get {
                return this.IdDestinationUsernameField;
            }
            set {
                if ((this.IdDestinationUsernameField.Equals(value) != true)) {
                    this.IdDestinationUsernameField = value;
                    this.RaisePropertyChanged("IdDestinationUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SendDate {
            get {
                return this.SendDateField;
            }
            set {
                if ((this.SendDateField.Equals(value) != true)) {
                    this.SendDateField = value;
                    this.RaisePropertyChanged("SendDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatServiceProxy.IChatService", CallbackContract=typeof(DamasChinas_Client.UI.ChatServiceProxy.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMessage")]
        void SendMessage(DamasChinas_Client.UI.ChatServiceProxy.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(DamasChinas_Client.UI.ChatServiceProxy.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/RegistrarCliente")]
        void RegistrarCliente(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/RegistrarCliente")]
        System.Threading.Tasks.Task RegistrarClienteAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetHistoricalMessages", ReplyAction="http://tempuri.org/IChatService/GetHistoricalMessagesResponse")]
        DamasChinas_Client.UI.ChatServiceProxy.Message[] GetHistoricalMessages(int idUser, string idUser2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetHistoricalMessages", ReplyAction="http://tempuri.org/IChatService/GetHistoricalMessagesResponse")]
        System.Threading.Tasks.Task<DamasChinas_Client.UI.ChatServiceProxy.Message[]> GetHistoricalMessagesAsync(int idUser, string idUser2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Receivemessage")]
        void Receivemessage(DamasChinas_Client.UI.ChatServiceProxy.Message mensaje);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : DamasChinas_Client.UI.ChatServiceProxy.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<DamasChinas_Client.UI.ChatServiceProxy.IChatService>, DamasChinas_Client.UI.ChatServiceProxy.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(DamasChinas_Client.UI.ChatServiceProxy.Message message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(DamasChinas_Client.UI.ChatServiceProxy.Message message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public void RegistrarCliente(string username) {
            base.Channel.RegistrarCliente(username);
        }
        
        public System.Threading.Tasks.Task RegistrarClienteAsync(string username) {
            return base.Channel.RegistrarClienteAsync(username);
        }
        
        public DamasChinas_Client.UI.ChatServiceProxy.Message[] GetHistoricalMessages(int idUser, string idUser2) {
            return base.Channel.GetHistoricalMessages(idUser, idUser2);
        }
        
        public System.Threading.Tasks.Task<DamasChinas_Client.UI.ChatServiceProxy.Message[]> GetHistoricalMessagesAsync(int idUser, string idUser2) {
            return base.Channel.GetHistoricalMessagesAsync(idUser, idUser2);
        }
    }
}
